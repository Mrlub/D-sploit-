import sys,os
from time import sleep

os.system("clear || cls")

from data.shell.shell import *
from data.shell.modules import d_exploit, Modules

from riposte import Riposte
from riposte.exceptions import RiposteException as Except


class Shell(Riposte):
    @property
    def prompt(self,):
        
        if md.module:
            return f"{d_exploit} (\033[31m{md.module}\033[m) > "
        else:
            return self._prompt  # reference to `prompt` parameter.


md = Modules(
    mds=all_modules,
    help=help,
    show=show_o
    )
app = Shell(prompt=d_exploit+" > ")


@app.command("use")
def set_mode(mode):
    lst = md.modules
    if mode in lst:
        md.module = mode
    else:
        app.error(f"modo [{mode}] desconhecido")
    
    
@app.command("back")
def back_mode():
    md.module = None
    md.info_data = {"host": "", "port":"", "url":"", "lhost": "127.0.0.1","lport": 8080,"username": "", "protocol": "http"}

@app.command("run")
@app.command("exploit")
def run():
    if md.module:
        app.success("start %s ..."%(md.module))
        sleep(2)
        app.success("%s finalizado ..."%(md.module))
    else:
        app.error("selecione um modulo para executar ")

for i in ["?",'help']:
    @app.command(i)
    def help():
        data = md.help
        if md.module:
            app.info(data[md.module])
        else:
            app.info(data["global"])



@app.command("show")
def show(option):
    o = ["info","options"]
    if option in o:
        data = md.show
        #print(data)
        module = md.module
        if option == "info" and module:
            text = str(data[module]["info"])
            app.info(text)
            
            
        if option == "options" and module:
            text = data[module]["options"]
            for k,v in md.info_data.items():
                text = text.replace(f"%{k}", f"{v}")
            app.info(text)
            
    else:
        app.info("""cmd [show] [options]
        info       informações do modulo
        options    opções do modulo
        """)

@app.command("set")
def set(name, value):
    if not md.module:
        app.error('não está em nehum modulo')
        app.error("command: use [module]")
        return
    if name in md.info_data:
        md.info_data[name] = value
        app.success("%s => %s"%(name, value))
    else:
        app.error("o parametro '%s' não existe coloque um valido"%(name))


@app.command("exit")
def sair():
    app.success("Saindo ...")
    sleep(2)
    sys.exit(0)


@app.command("cls")
@app.command("clear")
def system():
    os.system("clear || cls")


print(banner)
app.run()
